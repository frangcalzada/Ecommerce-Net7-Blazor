DTO - Capa que toma los datos del modelo y se comunica con el cliente
Model - Capa que representa las tablas en la bd
Repository - Capa que hace las consultas a la bd
Service - Capa que se comunica con la api y con el repositorio
Utilities - Capa de utilidades que va a permitir convertir un modelo a dto y dto a modelo


webassembly se conecta con la api
la api interactua con todas las otras capas

1) Tirar comando en Model para EF:
Scaffold-DbContext "Server=.; DataBase=DBEcommerce; Trusted_Connection=True; TrustServerCertificate=True;" Microsoft.EntityFrameworkCore.SqlServerScaffold-DbContext "Server=.; DataBase=DBEcommerce; Trusted_Connection=True; TrustServerCertificate=True;" Microsoft.EntityFrameworkCore.SqlServer

2) Definir Repositorio

3) Definir DTO y Utilidades -> ResponseDTO modelo que comunica a todos los dto, es la que hace respuesta a todas las solicitudes que vamos hacer desde nuestra api
En utilidades instalar desde nuget Automapper y AutoMapper.Extensions.Microsoft.Dependency.Injection

04) Capa Servicio
Definir capas de servicio: usuario, prodcuto, ventas, categoria y dashboard

05) API
definir controladores y CORS (para aceptar los dominios y conexiones entre webassembly y API)

06) Service del webassembly, definicion de //API consumption en program.cs
instalacion del nuget blazored.localstorage(me permite guardar la info de las compras en un localstorage) y blazored.toast

7)Vistas en webassembly, ir a la conf del proyecto y seleccionar proyectos de inicio multiples, dejar primer ecommerce.api y luego ecommerce.webassembly